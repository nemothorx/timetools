#!/bin/sh
#

# determine $width, 80 by default
if [ -z "$1" ]; then
  WIDTH=80
else  
  WIDTH="$1"
fi

# setup relevant figletfonts.
# "big" font style should be fine for widths 95 and greater
if [ "$WIDTH" -ge "95" ]; then
  DATEFONT=roman	# font the date (Day Month Number) uses 
  TIMEFONT=doh		# font the time (hours:minutes) shows up as
else
  DATEFONT=thick	# again, defaults here are for smaller widths
  TIMEFONT=colossal	# (testing seems to show 95 is wide enough for "big"
fi  


function groovybar () {

echo -n "   -=[....:...10....:...20....:...30....:...40....:...50....:...60]=-"

echo -ne "\e[0G   -=["
# fudge ~2 seconds for the time it takes to do the figlets/fortunes
TEMPSEC=`date '+%S'`
SEC_ELAPSED=`echo $[$TEMPSEC+2]`
for i in `seq 1 $SEC_ELAPSED` ; do
  echo -n "*"
done

SEC_REMAINING=`echo $[60-$SEC_ELAPSED]`

for i in `seq 1 "$SEC_REMAINING"` ; do
 sleep 1
 echo -n "#"
done

 echo "]=-"
}


# loop continuous and give us output!
while true ; do
  CURRENTSEC=`date '+%s'`
#  clear
  echo "devel version"
  if [ `echo $[$CURRENTSEC%5]` == "0" ]; then
    /usr/bin/figlet -f term -W -w "$WIDTH" -c `chkmail $MAIL`
  else
    /usr/bin/figlet -f term -W -w "$WIDTH" -c `uptime`
  fi
  echo ""
  /usr/bin/figlet -f term -W -w "$WIDTH" -c `date`
  echo ""
  if [ `echo $[$RANDOM%4]` == "0" ]; then 
    /usr/games/fortune -a
    echo ""
    echo ""
  else
    /usr/bin/figlet -f $DATEFONT -W -w "$WIDTH" -c `date '+%a %-d %b'`
    /usr/bin/figlet -f $TIMEFONT -W -w "$WIDTH" -c `date '+%H : %M'`
  fi

  # if it's on the hour, beep a few times as appropriate 
  if [ `date '+%M'` == "00" ]; then
    OCLOCK=`date '+%l'`
    sleep 5
    for a in `seq 1 $OCLOCK` ; do
      echo -en "$a . \a\a\a"
      sleep 1
    done
    echo "O'Clock and all's well!"
    echo ""
  fi
  groovybar
done

exit 0
