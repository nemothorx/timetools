#!/bin/bash

# worldtime shows timezones around the world for "now" by default, or by any date(1) compatible date in $1
#
# The local timezone offset is highlighted. 
#

case $1 in
    -h|--help|examples)
        echo "
# Simple usage: 
    worldtime

# Advanced usage - show times of a different time. 

    worldtime <date(1) compatible date/time string>
eg
    worldtime '19 may 2021 03:00'

# Super advanced usage - show times of a different time given in a different timezone

    worldtime '19 may 2021 18:00 BST'
or (same text result, but changes the highlight indicating local time)
    TZ=Europe/London worldtime '19 may 2021 18:00'
"
    exit 0
    ;;
esac


#
#d=$(date "+%a %b %d %T %Y %Z")
bon=$(tput rev)
boff=$(tput sgr0)
#

# Should be updated to reflect Canonical by preference, as per https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
# ...so USA using the city that the deprecated points to. eg, US/Central is a link to America/Chicago
# ...but I'm using some deprecated because damnit, the names are better known at a glance
tzlist="Pacific/Midway
US/Hawaii 
US/Alaska
US/Pacific
US/Mountain
US/Central
US/Eastern
Pacific/Easter
Chile/Continental
Brazil/West
Brazil/East
Atlantic/Azores
UTC
Europe/London
Europe/Rome
Africa/Cairo
Asia/Baghdad
Europe/Moscow
Asia/Dubai
Asia/Calcutta
Asia/Dhaka
Asia/Bangkok
Asia/Hong_Kong
Australia/West
Asia/Tokyo
Australia/North
Australia/South
Australia/Queensland
Australia/NSW
Pacific/Fiji
Pacific/Auckland"

when=${1:-now}
abswhen=$(date -Iseconds -d "$when")
z=$(date -d "$when" "+%z")

# TODO: 
# indicate timezone name as well. 
# debian: text string in /etc/timezone
# centos/rh: binary contents of /etc/localtime (might be symlink sometimes?)
#

# version 2 used this loop (with better output), but failed on absolute strings.
# so now it's used to calculate the local (reference) timezone name
# 2021 01 28 - output now uses RFC5322 style with additional +%Z. Highlighting of current timezone improved to suit
TZNAMEtmp=$( (for t in $tzlist  ; do
    echo "$t,$(TZ=$t date -d "$when" "+%z")"
done) | grep -m 1 -- $z | cut -d, -f 1)


# if our attempt to calculate a TZ name fails, we have a default
TZNAME=${TZNAMEtmp:-UTC}

# version 3: pretty much the V2 loop, but with the TZ=TZNAME param. 
# ...we now handle both absolute and relative time

ddiff=$(datediff now "$abswhen")

( (for t in $tzlist ; do
    echo -e "${t};$(TZ=$t date -d "TZ=\"$TZNAME\" $abswhen" "+%a, %d %b %Y %T %z ;(+%Z)$boff")"
done) | sed -e "s/\(.* $z .*\)/$bon\1/g" ; [ "$ddiff" != "0" ] && echo -e "\n${bon}offset from now ; $ddiff$boff" ) | column -t -s';'


exit
