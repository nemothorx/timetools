#!/bin/bash

# worldtime shows timezones around the world for "now" by default, or by any date(1) compatible date in $1
#
# The local timezone offset is highlighted. 
#

listsize=short  # a default


case $1 in
    -h|--help|examples)
        echo "
# Simple usage: 
    worldtime [-l]

    -l|--long - show 32 timezones around the world instead of the default 5
        This option MUST be $1 before date(1) compatible dates noted below

# Advanced usage - show times of a different time. 

    worldtime <date(1) compatible date/time string>
eg
    worldtime '19 may 2021 03:00'

# Super advanced usage - show times of a different time given in a different timezone

    worldtime '19 may 2021 18:00 BST'
or (same text result, but changes the highlight indicating local time)
    TZ=Europe/London worldtime '19 may 2021 18:00'

"
        exit 0
        ;;
    -l|--long)
        listsize=long
        shift
        ;;
esac


#
#d=$(date "+%a %b %d %T %Y %Z")
bon=$(tput rev)
boff=$(tput sgr0)
#

# Has been updated to reflect Canonical names as per https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
# ...since the deprecated names no longer work with the latest linux
# ...this despite that to my thinking, I'd rather the deprecated US/Eastern than America/New_York. US/Pacific rather than America/Los_Angeles. etc
# TODO: option to have real-TZ/display-TZ pairs

case $listsize in
    short) 
        tzlist="America/Los_Angeles
America/New_York
Europe/London
Asia/Hong_Kong
Australia/Brisbane
        "
        ;;
    long)
        tzlist="Pacific/Pago_Pago
Pacific/Honolulu
America/Anchorage
America/Los_Angeles
America/Denver
America/Chicago
America/New_York
Pacific/Easter
America/Santiago
America/Manaus
America/Sao_Paulo
Atlantic/Azores
UTC
Europe/London
Europe/Rome
Africa/Cairo
Asia/Baghdad
Europe/Moscow
Asia/Dubai
Asia/Kolkata
Asia/Dhaka
Asia/Bangkok
Asia/Hong_Kong
Australia/Perth
Asia/Tokyo
Asia/Seoul
Australia/Darwin
Australia/Adelaide
Australia/Brisbane
Australia/Sydney
Pacific/Fiji
Pacific/Auckland"
        ;;
esac

when=${1:-now}
abswhen=$(date -Iseconds -d "$when")
z=$(date -d "$when" "+%z")

# TODO: 
# * indicate timezone name as well. 
#   - debian: text string in /etc/timezone
#   - centos/rh: binary contents of /etc/localtime (might be symlink sometimes?)
# * simple asciigraphical display of day/night location of each
#   - inspired by everytimezone.com
#

# version 2 used this loop (with better output), but failed on absolute strings.
# so now it's used to calculate the local (reference) timezone name
# 2021 01 28 - output now uses RFC5322 style with additional +%Z. Highlighting of current timezone improved to suit
TZNAMEtmp=$( (for t in $tzlist  ; do
    echo "$t,$(TZ=$t date -d "$when" "+%z")"
done) | grep -m 1 -- $z | cut -d, -f 1)


# if our attempt to calculate a TZ name fails, we have a default
TZNAME=${TZNAMEtmp:-UTC}

# version 3: pretty much the V2 loop, but with the TZ=TZNAME param. 
# ...we now handle both absolute and relative time

ddiff=$(datediff now "$abswhen")

( (for t in $tzlist ; do
    echo -e "${t};$(TZ=$t date -d "TZ=\"$TZNAME\" $abswhen" "+%a, %d %b %Y %T %z ;(+%Z)$boff")"
done) | sed -e "s/\(.* $z .*\)/$bon\1/g" ; [ "$ddiff" != "0" ] && echo -e "\n${bon}offset from now ; $ddiff$boff" ) | column -t -s';'


exit
