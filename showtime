#!/usr/bin/zsh
#!/bin/bash

#set -x

case $1 in
    -*)
        opt=${1:-a} # default to all
        shift
        ;;
esac

if [[ $1 == "" ]]; then
	input=$(date +%s)
else
	input=$1
fi


function showtime () {
        TIME=$1;
        OUT=""
	
	#echo "original: $TIME"
        
        SECS=$(printf "%05.2f" "$(($TIME%60))");	# any leftover seconds from a minute
        TIME=$(printf "%1.0f" "$(($TIME - $SECS))");	# then remove those and ensure integer (this rounds up as a float)
        
	# TIME should now be an exact num minutes
	#echo "less $SECS seconds: $TIME"
				
        MINS=$(printf "%02d" "$((($TIME%3600)/60))");	# any leftover minutes from an hour
        TIME=$(($TIME - ($MINS*60)));	# then remove those...
        
	# TIME should now be an exact num hours
	#echo "less $MINS minutes: $TIME"
				
        HRS=$(printf "%02d" "$((($TIME%86400)/3600))");	# any leftover hours in a day
        TIME=$(($TIME - ($HRS*3600)));		# then remove those...
	
	# TIME should now be an exact num days 
	#echo "less $HRS hours: $TIME"
	
	DAYS=$(($TIME/86400));
	
	if [[ $DAYS -ne 0 ]]; then
                OUT="${DAYS}d"
		DAYDEC=${DAYS}
        fi
	if [[ $HRS -ne 0 ]]; then
                OUT="${OUT} ${HRS}h"
        fi
        if [[ $MINS -ne 0 ]]; then
                OUT="${OUT} ${MINS}m"
        fi
        if [[ $SECS -ne 0 ]]; then
                OUT="${OUT} ${SECS}s"
        fi

	# the hours/min/sec are what % of a day?
        if [[ "$opt" == "-v" ]] ; then
            DECPART=$(echo "scale=3 ; ($1-$TIME)/86400" | bc | tr -d ".")
            DAYDEC="${DAYDEC}.${DECPART}"
        fi
        
        # remove leading whitespace
        OUT="$(echo -e "${OUT}" | sed -e 's/^[[:space:]]*//')"
}

showtime $input

# if we got nothing, we make it explicit
[ -z "$OUT" ] && OUT="0"

# UNIX_OUT=$(date -d "1970-01-01 00:00:00 +0000 $input sec" +"%Y-%m-%d %T %z")
UNIX_OUT=$(date -d "@$input")

# TODO: more output options
# * verbose should use full words in it's $OUT

case $opt in
    -e)
        # epoch only
        echo "$UNIX_OUT"
        ;;
    -s)
        # summary only
        echo "$OUT"
        ;;
    -S)
        # summary format 2
        [ $DAYS -gt 0 ] && echo -n "${DAYS}d"
        echo "$HRS:$MINS:$SECS"
        ;;
    -v)
        # epoch and summary and day decimal
        echo "$UNIX_OUT ($OUT [$DAYDEC days])"
        ;;
    *)
        # epoch and summary
        echo "$UNIX_OUT ($OUT)"
        ;;
esac

# TODO: check this... consider folding in and providing an option to display
# human readable relative times "6 months, 3 weeks" style. 
# https://unix.stackexchange.com/questions/364776/how-to-output-a-date-time-as-20-minutes-ago-or-9-days-ago-etc
